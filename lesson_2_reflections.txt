# What happens when you initialize a repository? Why do you need to do it?
@ Ans: Git will create a .git directory and start to trace all changes. We need to do this
       to make it a git repository 

# How is the staging area different from the working directory and the repository? 
  What value do you think it offers?
@ Ans: Staging area provides a space to record changes that users want to commit in the future.
       On the other hand, working directory can have other files that users don't want to 
       track. 
       And the repository stores only committed changes. 

# How can you use the staging area to make sure you have one commit per logical change?
@ Ans: With multiple files being edited, we can add logically related ones to staging area 
       and commit them at a time. Then do the same for the other files.

# What are some situations when branches would be helpful in keeping your history organized? 
  How would branches help?
@ Ans: When we are making some major changes that we don't want to affect current production
       code, we can add a branch.

# How do the diagrams help you visualize the branch structure?
@ Ans: We can see the branch-splitting commits, and thus trace the changes.

# What is the result of merging two branches together? Why do we represent it in the diagram
  the way we do?
@ Ans: We end up adding a new commit that has code from both branches. And the commit
       has two parent commits from two branches. We represented the diagram in that way just 
       to illustrate that each commit knows only its parent(s).

# What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
@ Ans: Pros is that Git might make mistakes. Cons in that it's painful to manually merge
       because some of the changes could be made by others. 
